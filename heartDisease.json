{"paragraphs":[{"text":"%spark.pyspark\ndef isSick(x):\n    if x == 3:\n        return 0\n    else:\n        return 1","user":"walker","dateUpdated":"2019-10-11T11:01:37+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570785919759_-1457622604","id":"20191011-092519_94493470","dateCreated":"2019-10-11T09:25:19+0000","dateStarted":"2019-10-11T11:01:37+0000","dateFinished":"2019-10-11T11:01:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:96266","results":{"code":"SUCCESS","msg":[]}},{"text":"%spark.pyspark\n\nimport pandas as pd\nfrom pyspark.sql.types import StructType, StructField, NumericType\n\n \ncols = ('age',       \n      'sex',         \n       'chest pain',           \n       'resting blood pressure',    \n       'serum cholestoral',       \n       'fasting blood sugar',         \n       'resting electrocardiographic results', \n       'maximum heart rate achieved',  \n       'exercise induced angina',     \n       'ST depression induced by exercise relative to rest',  \n      'the slope of the peak exercise ST segment',     \n      'number of major vessels ',       \n       'thal',  \n       'last')\n      \n\n      \ndata = pd.read_csv('/home/ubuntu/Downloads/heart.csv', delimiter=' ', names=cols)\n\ndata = data.iloc[:,0:13]\n\ndata['isSick'] = data['thal'].apply(isSick)\n\ndf = spark.createDataFrame(data)\n\n \n                    \n \n\n ","user":"walker","dateUpdated":"2019-10-11T11:01:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python","tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570626673174_-397859394","id":"20191009-131113_1020772482","dateCreated":"2019-10-09T13:11:13+0000","dateStarted":"2019-10-11T11:01:38+0000","dateFinished":"2019-10-11T11:01:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:96267","results":{"code":"SUCCESS","msg":[]}},{"text":"%spark.pyspark\nfrom pyspark.ml.feature import StandardScaler\nfrom pyspark.ml.feature import VectorAssembler\n\nfeatures =   ('age',       \n      'sex',         \n       'chest pain',           \n       'resting blood pressure',    \n       'serum cholestoral',       \n       'fasting blood sugar',         \n       'resting electrocardiographic results', \n       'maximum heart rate achieved',  \n       'exercise induced angina',     \n       'ST depression induced by exercise relative to rest',  \n      'the slope of the peak exercise ST segment',     \n      'number of major vessels ') \n\nassembler = VectorAssembler(inputCols=features,outputCol=\"features\")\n \nraw_data=assembler.transform(df)\nraw_data.select(\"features\").show(truncate=False)","user":"walker","dateUpdated":"2019-10-11T11:01:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://parisx:4040/jobs/job?id=58"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1570787472789_-2031757993","id":"20191011-095112_1692182483","dateCreated":"2019-10-11T09:51:12+0000","dateStarted":"2019-10-11T11:01:38+0000","dateFinished":"2019-10-11T11:01:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:96268","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------------------------------------------+\n|features                                                |\n+--------------------------------------------------------+\n|[70.0,1.0,4.0,130.0,322.0,0.0,2.0,109.0,0.0,2.4,2.0,3.0]|\n|[67.0,0.0,3.0,115.0,564.0,0.0,2.0,160.0,0.0,1.6,2.0,0.0]|\n|[57.0,1.0,2.0,124.0,261.0,0.0,0.0,141.0,0.0,0.3,1.0,0.0]|\n|[64.0,1.0,4.0,128.0,263.0,0.0,0.0,105.0,1.0,0.2,2.0,1.0]|\n|[74.0,0.0,2.0,120.0,269.0,0.0,2.0,121.0,1.0,0.2,1.0,1.0]|\n|[65.0,1.0,4.0,120.0,177.0,0.0,0.0,140.0,0.0,0.4,1.0,0.0]|\n|[56.0,1.0,3.0,130.0,256.0,1.0,2.0,142.0,1.0,0.6,2.0,1.0]|\n|[59.0,1.0,4.0,110.0,239.0,0.0,2.0,142.0,1.0,1.2,2.0,1.0]|\n|[60.0,1.0,4.0,140.0,293.0,0.0,2.0,170.0,0.0,1.2,2.0,2.0]|\n|[63.0,0.0,4.0,150.0,407.0,0.0,2.0,154.0,0.0,4.0,2.0,3.0]|\n|[59.0,1.0,4.0,135.0,234.0,0.0,0.0,161.0,0.0,0.5,2.0,0.0]|\n|[53.0,1.0,4.0,142.0,226.0,0.0,2.0,111.0,1.0,0.0,1.0,0.0]|\n|[44.0,1.0,3.0,140.0,235.0,0.0,2.0,180.0,0.0,0.0,1.0,0.0]|\n|[61.0,1.0,1.0,134.0,234.0,0.0,0.0,145.0,0.0,2.6,2.0,2.0]|\n|[57.0,0.0,4.0,128.0,303.0,0.0,2.0,159.0,0.0,0.0,1.0,1.0]|\n|[71.0,0.0,4.0,112.0,149.0,0.0,0.0,125.0,0.0,1.6,2.0,0.0]|\n|[46.0,1.0,4.0,140.0,311.0,0.0,0.0,120.0,1.0,1.8,2.0,2.0]|\n|[53.0,1.0,4.0,140.0,203.0,1.0,2.0,155.0,1.0,3.1,3.0,0.0]|\n|[64.0,1.0,1.0,110.0,211.0,0.0,2.0,144.0,1.0,1.8,2.0,0.0]|\n|[40.0,1.0,1.0,140.0,199.0,0.0,0.0,178.0,1.0,1.4,1.0,0.0]|\n+--------------------------------------------------------+\nonly showing top 20 rows\n\n"}]}},{"text":"%spark.pyspark\nfrom pyspark.ml.feature import StandardScaler\nstandardscaler=StandardScaler().setInputCol(\"features\").setOutputCol(\"Scaled_features\")\nraw_data=standardscaler.fit(raw_data).transform(raw_data)\nraw_data.select(\"features\",\"Scaled_features\").show(5)","user":"walker","dateUpdated":"2019-10-11T11:01:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570787532506_804248666","id":"20191011-095212_884979848","dateCreated":"2019-10-11T09:52:12+0000","dateStarted":"2019-10-11T11:01:38+0000","dateFinished":"2019-10-11T11:01:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:96269","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+\n|            features|     Scaled_features|\n+--------------------+--------------------+\n|[70.0,1.0,4.0,130...|[7.68465131046640...|\n|[67.0,0.0,3.0,115...|[7.35530911144641...|\n|[57.0,1.0,2.0,124...|[6.25750178137978...|\n|[64.0,1.0,4.0,128...|[7.02596691242642...|\n|[74.0,0.0,2.0,120...|[8.12377424249305...|\n+--------------------+--------------------+\nonly showing top 5 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://parisx:4040/jobs/job?id=59","http://parisx:4040/jobs/job?id=60"],"interpreterSettingId":"spark"}}},{"text":"%spark.pyspark\nfrom pyspark.ml.tuning import ParamGridBuilder, TrainValidationSplit\ntraining, test = raw_data.randomSplit([0.5, 0.5], seed=12345) ","user":"walker","dateUpdated":"2019-10-11T11:01:39+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570786856257_1989926248","id":"20191011-094056_1017703181","dateCreated":"2019-10-11T09:40:56+0000","dateStarted":"2019-10-11T11:01:39+0000","dateFinished":"2019-10-11T11:01:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:96270","results":{"code":"SUCCESS","msg":[]}},{"text":"%spark.pyspark\nfrom pyspark.ml.classification import LogisticRegression\n\nlr = LogisticRegression(labelCol=\"isSick\", featuresCol=\"Scaled_features\",maxIter=10)\nmodel=lr.fit(training)\npredict_train=model.transform(training)\npredict_test=model.transform(test)\npredict_test.select(\"isSick\",\"prediction\").show(10)\n\n","user":"walker","dateUpdated":"2019-10-11T11:01:40+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"age":"string","sex":"string","chest pain":"string","resting blood pressure":"string","serum cholestoral":"string","fasting blood sugar":"string","resting electrocardiographic results":"string","maximum heart rate achieved":"string","exercise induced angina":"string","ST depression induced by exercise relative to rest":"string","the slope of the peak exercise ST segment":"string","number of major vessels ":"string","thal":"string","last":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://parisx:4040/jobs/job?id=63","http://parisx:4040/jobs/job?id=64","http://parisx:4040/jobs/job?id=65","http://parisx:4040/jobs/job?id=66","http://parisx:4040/jobs/job?id=67","http://parisx:4040/jobs/job?id=68","http://parisx:4040/jobs/job?id=69","http://parisx:4040/jobs/job?id=70","http://parisx:4040/jobs/job?id=71","http://parisx:4040/jobs/job?id=72","http://parisx:4040/jobs/job?id=73","http://parisx:4040/jobs/job?id=74","http://parisx:4040/jobs/job?id=75","http://parisx:4040/jobs/job?id=76"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1570780194447_-881313364","id":"20191011-074954_221759573","dateCreated":"2019-10-11T07:49:54+0000","dateStarted":"2019-10-11T11:01:40+0000","dateFinished":"2019-10-11T11:01:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:96273","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+----------+\n|isSick|prediction|\n+------+----------+\n|     0|       0.0|\n|     1|       0.0|\n|     0|       0.0|\n|     0|       0.0|\n|     0|       0.0|\n|     0|       0.0|\n|     0|       0.0|\n|     0|       1.0|\n|     0|       1.0|\n|     0|       0.0|\n+------+----------+\nonly showing top 10 rows\n\n"}]}},{"text":"%spark.pyspark\nimport matplotlib.pyplot as plt\n \nimport numpy as np\n \n \n \narr = [int(row.isSick ) for row in predict_test.select(['isSick']).collect()]\n \nplt.hist(arr)","user":"walker","dateUpdated":"2019-10-11T11:43:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570791927022_-1684254656","id":"20191011-110527_322705203","dateCreated":"2019-10-11T11:05:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:99956","dateFinished":"2019-10-11T11:43:08+0000","dateStarted":"2019-10-11T11:43:08+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"(array([88.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 59.]),\n array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ]),\n <a list of 10 Patch objects>)\n"},{"type":"IMG","data":"iVBORw0KGgoAAAANSUhEUgAAAXQAAAD8CAYAAABn919SAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAADINJREFUeJzt3H2MpfVZh/HrW1as1FoojAQBHZpSdYMxkAmhIalaGoPFAImE0FhdzUbSqrWKiUX7R43+A4m21oSom1JdTW1BbGQjVVMphNjI6lCwvEm7UqCLvEy14Fu0kN7+cZ5UirucZ2fOy87N9Uk2c16eM8/92zN77ZnnvKSqkCRtf69Y9gCSpNkw6JLUhEGXpCYMuiQ1YdAlqQmDLklNGHRJasKgS1ITBl2SmtixyJ2ddNJJtbq6ushdStK2d9ddd32pqlambbfQoK+urrK+vr7IXUrStpfk0THbechFkpow6JLUhEGXpCYMuiQ1YdAlqQmDLklNGHRJasKgS1ITBl2SmljoO0W3YvXqW5ay30euuWgp+5WkI+UjdElqwqBLUhMGXZKaMOiS1IRBl6QmDLokNWHQJakJgy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCYMuiQ1MSroSX4hyf1J7kvy0SSvTHJGkv1JDiS5Icmx8x5WknR4U4Oe5FTg54C1qjoLOAa4ArgW+EBVvR74MrB7noNKkl7a2EMuO4BvSrIDOA54AngzcNNw/V7g0tmPJ0kaa2rQq+px4DeAx5iE/FngLuCZqnp+2OwgcOq8hpQkTTfmkMsJwCXAGcC3Aa8CLhy7gyRXJllPsr6xsbHpQSVJL23MIZe3AF+oqo2qeg74OHA+cPxwCAbgNODxQ924qvZU1VpVra2srMxkaEnS/zcm6I8B5yU5LkmAC4AHgNuAy4ZtdgE3z2dESdIYY46h72fy5OdngHuH2+wB3gNcleQAcCJw/RznlCRNsWP6JlBV7wPe96KLHwbOnflEkqRN8Z2iktSEQZekJgy6JDVh0CWpCYMuSU0YdElqwqBLUhMGXZKaMOiS1IRBl6QmDLokNWHQJakJgy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCYMuiQ1YdAlqQmDLklNGHRJasKgS1ITBl2SmjDoktSEQZekJgy6JDVh0CWpCYMuSU0YdElqwqBLUhMGXZKaMOiS1IRBl6QmDLokNWHQJakJgy5JTRh0SWpiVNCTHJ/kpiT/mOTBJG9M8tokn0zy+eHrCfMeVpJ0eGMfoX8Q+Muq+i7ge4EHgauBW6vqTODW4bwkaUmmBj3Ja4A3AdcDVNVXquoZ4BJg77DZXuDSeQ0pSZpuzCP0M4AN4PeT3J3kQ0leBZxcVU8M2zwJnDyvISVJ040J+g7gHOB3qups4D950eGVqiqgDnXjJFcmWU+yvrGxsdV5JUmHMSboB4GDVbV/OH8Tk8A/leQUgOHr04e6cVXtqaq1qlpbWVmZxcySpEPYMW2DqnoyyReTfGdVPQRcADww/NkFXDN8vXmuk0rSFq1efctS9vvINRctZD9Tgz54F/CRJMcCDwM/yeTR/Y1JdgOPApfPZ0RJ0hijgl5V9wBrh7jqgtmOI0naLN8pKklNGHRJasKgS1ITBl2SmjDoktSEQZekJgy6JDVh0CWpCYMuSU0YdElqwqBLUhMGXZKaMOiS1IRBl6QmDLokNWHQJakJgy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCYMuiQ1YdAlqQmDLklNGHRJasKgS1ITBl2SmjDoktSEQZekJgy6JDVh0CWpCYMuSU0YdElqwqBLUhMGXZKaMOiS1IRBl6QmRgc9yTFJ7k7y58P5M5LsT3IgyQ1Jjp3fmJKkaY7kEfq7gQdfcP5a4ANV9Xrgy8DuWQ4mSToyo4Ke5DTgIuBDw/kAbwZuGjbZC1w6jwElSeOMfYT+W8AvAV8dzp8IPFNVzw/nDwKnzng2SdIRmBr0JD8MPF1Vd21mB0muTLKeZH1jY2Mz30KSNMKYR+jnAxcneQT4GJNDLR8Ejk+yY9jmNODxQ924qvZU1VpVra2srMxgZEnSoUwNelX9clWdVlWrwBXAp6rqR4HbgMuGzXYBN89tSknSVFt5Hfp7gKuSHGByTP362YwkSdqMHdM3+T9VdTtw+3D6YeDc2Y8kSdoM3ykqSU0YdElqwqBLUhMGXZKaMOiS1IRBl6QmDLokNWHQJakJgy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCYMuiQ1YdAlqQmDLklNGHRJasKgS1ITBl2SmjDoktSEQZekJgy6JDVh0CWpCYMuSU0YdElqwqBLUhMGXZKaMOiS1IRBl6QmDLokNWHQJakJgy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCamBj3J6UluS/JAkvuTvHu4/LVJPpnk88PXE+Y/riTpcMY8Qn8e+MWq2gmcB/xMkp3A1cCtVXUmcOtwXpK0JFODXlVPVNVnhtP/DjwInApcAuwdNtsLXDqvISVJ0x3RMfQkq8DZwH7g5Kp6YrjqSeDkmU4mSToio4Oe5JuBPwV+vqr+7YXXVVUBdZjbXZlkPcn6xsbGloaVJB3eqKAn+QYmMf9IVX18uPipJKcM158CPH2o21bVnqpaq6q1lZWVWcwsSTqEMa9yCXA98GBVvf8FV+0Ddg2ndwE3z348SdJYO0Zscz7wY8C9Se4ZLvsV4BrgxiS7gUeBy+czoiRpjKlBr6q/AXKYqy+Y7TiSpM3ynaKS1IRBl6QmDLokNWHQJakJgy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCYMuiQ1YdAlqQmDLklNGHRJasKgS1ITBl2SmjDoktSEQZekJgy6JDVh0CWpCYMuSU0YdElqwqBLUhMGXZKaMOiS1IRBl6QmDLokNWHQJakJgy5JTRh0SWrCoEtSEwZdkpow6JLUhEGXpCYMuiQ1YdAlqQmDLklNGHRJamJLQU9yYZKHkhxIcvWshpIkHblNBz3JMcB1wA8BO4G3Jdk5q8EkSUdmK4/QzwUOVNXDVfUV4GPAJbMZS5J0pLYS9FOBL77g/MHhMknSEuyY9w6SXAlcOZz9jyQPbfJbnQR8aTZTjZdrF73Hr7OUNS+Za355eFmtOddueb3fMWajrQT9ceD0F5w/bbjs61TVHmDPFvYDQJL1qlrb6vfZTlzzy4Nr7m9R693KIZe/B85MckaSY4ErgH2zGUuSdKQ2/Qi9qp5P8rPAXwHHAB+uqvtnNpkk6Yhs6Rh6VX0C+MSMZplmy4dttiHX/PLgmvtbyHpTVYvYjyRpznzrvyQ1cdQFfdrHCST5xiQ3DNfvT7K6+Clna8Sar0ryQJLPJrk1yaiXMB3Nxn5sRJIfSVJJtvUrIsasN8nlw/18f5I/XvSMszbi5/rbk9yW5O7hZ/uty5hzlpJ8OMnTSe47zPVJ8tvD38lnk5wz0wGq6qj5w+TJ1X8CXgccC/wDsPNF2/w08LvD6SuAG5Y99wLW/APAccPpd74c1jxs92rgDuBOYG3Zc8/5Pj4TuBs4YTj/rcueewFr3gO8czi9E3hk2XPPYN1vAs4B7jvM9W8F/gIIcB6wf5b7P9oeoY/5OIFLgL3D6ZuAC5JkgTPO2tQ1V9VtVfVfw9k7mbzmfzsb+7ERvw5cC/z3IoebgzHr/Snguqr6MkBVPb3gGWdtzJoL+Jbh9GuAf17gfHNRVXcA//oSm1wC/GFN3Akcn+SUWe3/aAv6mI8T+No2VfU88Cxw4kKmm48j/QiF3Uz+h9/Opq55+FX09Kq6ZZGDzcmY+/gNwBuSfDrJnUkuXNh08zFmzb8KvD3JQSavlnvXYkZbqrl+ZMrc3/qv2UnydmAN+L5lzzJPSV4BvB/4iSWPskg7mBx2+X4mv4HdkeR7quqZpU41X28D/qCqfjPJG4E/SnJWVX112YNtV0fbI/QxHyfwtW2S7GDyq9q/LGS6+Rj1EQpJ3gK8F7i4qv5nQbPNy7Q1vxo4C7g9ySNMjjXu28ZPjI65jw8C+6rquar6AvA5JoHfrsaseTdwI0BV/S3wSiaf8dLZqH/vm3W0BX3MxwnsA3YNpy8DPlXDsw3b1NQ1Jzkb+D0mMd/ux1Zhypqr6tmqOqmqVqtqlcnzBhdX1fpyxt2yMT/Xf8bk0TlJTmJyCObhRQ45Y2PW/BhwAUCS72YS9I2FTrl4+4AfH17tch7wbFU9MbPvvuxnhQ/zLPDnmDxD/t7hsl9j8g8aJnf6nwAHgL8DXrfsmRew5r8GngLuGf7sW/bM817zi7a9nW38KpeR93GYHGZ6ALgXuGLZMy9gzTuBTzN5Bcw9wA8ue+YZrPmjwBPAc0x+69oNvAN4xwvu5+uGv5N7Z/1z7TtFJamJo+2QiyRpkwy6JDVh0CWpCYMuSU0YdElqwqBLUhMGXZKaMOiS1MT/AoA7JXNA8czeAAAAAElFTkSuQmCC\n\n"},{"type":"TEXT","data":"<Figure size 432x288 with 1 Axes>"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://parisx:4040/jobs/job?id=98"],"interpreterSettingId":"spark"}}},{"text":"","user":"walker","dateUpdated":"2019-10-11T11:40:16+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570792350392_-458139160","id":"20191011-111230_1736345948","dateCreated":"2019-10-11T11:12:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:100350","dateFinished":"2019-10-11T11:39:51+0000","dateStarted":"2019-10-11T11:39:51+0000","results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://parisx:4040/jobs/job?id=90"],"interpreterSettingId":"spark"}}},{"text":"%spark.pyspark\n \n\n# Print the coefficients and intercepts for logistic regression with multinomial family\nprint(\"Multinomial coefficients: \" + str(model.coefficientMatrix))\nprint(\"Multinomial intercepts: \" + str(model.interceptVector))","user":"walker","dateUpdated":"2019-10-11T11:01:41+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570791083763_-478407110","id":"20191011-105123_295762744","dateCreated":"2019-10-11T10:51:23+0000","dateStarted":"2019-10-11T11:01:41+0000","dateFinished":"2019-10-11T11:01:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:96274","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Multinomial coefficients: DenseMatrix([[-0.41550466,  1.21573123,  0.16600826,  0.36478609,  0.33716549,\n              -0.020686  , -0.2092542 , -0.86514924,  0.1427418 , -0.3610241 ,\n               0.57324392,  0.42563706]])\nMultinomial intercepts: [-0.2767309778166021]\n"}]}},{"text":"%spark.pyspark\n# Extract the summary from the returned LogisticRegressionModel instance trained\n# in the earlier example\ntrainingSummary = model.summary\n\n# Obtain the objective per iteration\nobjectiveHistory = trainingSummary.objectiveHistory\nprint(\"objectiveHistory:\")\nfor objective in objectiveHistory:\n    print(objective)\n\n# Obtain the receiver-operating characteristic as a dataframe and areaUnderROC.\n#trainingSummary.roc.show()\nprint(\"areaUnderROC: \" + str(trainingSummary.areaUnderROC))\n\n# Set the model threshold to maximize F-Measure\nfMeasure = trainingSummary.fMeasureByThreshold\nmaxFMeasure = fMeasure.groupBy().max('F-Measure').select('max(F-Measure)').head()\nbestThreshold = fMeasure.where(fMeasure['F-Measure'] == maxFMeasure['max(F-Measure)']) \\\n    .select('threshold').head()['threshold']\nlr.setThreshold(bestThreshold)","user":"walker","dateUpdated":"2019-10-11T11:04:51+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"age":"string","sex":"string","chest pain":"string","resting blood pressure":"string","serum cholestoral":"string","fasting blood sugar":"string","resting electrocardiographic results":"string","maximum heart rate achieved":"string","exercise induced angina":"string","ST depression induced by exercise relative to rest":"string","the slope of the peak exercise ST segment":"string","number of major vessels ":"string","thal":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570785416983_-405639045","id":"20191011-091656_1871714335","dateCreated":"2019-10-11T09:16:56+0000","dateStarted":"2019-10-11T11:04:51+0000","dateFinished":"2019-10-11T11:04:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:96275","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"objectiveHistory:\n0.6923207250841539\n0.6671100204075346\n0.6248810218642107\n0.5453693992332761\n0.5409651279246932\n0.5335357845799918\n0.5112862818589883\n0.4988100534078758\n0.4954567910145071\n0.49493875063036424\n0.4948334975913442\nareaUnderROC: 0.8365995762711862\nLogisticRegression_48db9a9df31b15f990bc"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://parisx:4040/jobs/job?id=77","http://parisx:4040/jobs/job?id=78","http://parisx:4040/jobs/job?id=79","http://parisx:4040/jobs/job?id=80","http://parisx:4040/jobs/job?id=81","http://parisx:4040/jobs/job?id=82","http://parisx:4040/jobs/job?id=83","http://parisx:4040/jobs/job?id=84"],"interpreterSettingId":"spark"}}},{"text":"%spark.pyspark\ntrainingSummary","user":"walker","dateUpdated":"2019-10-11T11:04:59+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"age":"string","sex":"string","chest pain":"string","resting blood pressure":"string","serum cholestoral":"string","fasting blood sugar":"string","resting electrocardiographic results":"string","maximum heart rate achieved":"string","exercise induced angina":"string","ST depression induced by exercise relative to rest":"string","the slope of the peak exercise ST segment":"string","number of major vessels ":"string","thal":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570627395453_-1913081912","id":"20191009-132315_1652278208","dateCreated":"2019-10-09T13:23:15+0000","dateStarted":"2019-10-11T11:04:59+0000","dateFinished":"2019-10-11T11:04:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:96276","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<pyspark.ml.classification.BinaryLogisticRegressionTrainingSummary at 0x7f6ce0aa2518>"}]}},{"text":"data.info()","user":"walker","dateUpdated":"2019-10-11T09:16:13+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Price":"string","Rooms":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570627594552_1531265333","id":"20191009-132634_932134512","dateCreated":"2019-10-09T13:26:34+0000","dateStarted":"2019-10-11T09:16:13+0000","dateFinished":"2019-10-11T09:16:13+0000","status":"ERROR","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:96277"},{"text":" z.show(data)\n \n\n \n\n\n","user":"walker","dateUpdated":"2019-10-11T10:40:37+0000","config":{"colWidth":11,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":227,"optionOpen":false}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570627870630_-1173954090","id":"20191009-133110_294747364","dateCreated":"2019-10-09T13:31:10+0000","dateStarted":"2019-10-11T10:40:37+0000","dateFinished":"2019-10-11T10:40:37+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:96278"},{"text":"arr","user":"walker","dateUpdated":"2019-10-11T11:40:00+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570709979301_-136058291","id":"20191010-121939_338275750","dateCreated":"2019-10-10T12:19:39+0000","dateStarted":"2019-10-11T11:40:00+0000","dateFinished":"2019-10-11T11:40:00+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:96279","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)\n\u001b[0;32m<ipython-input-1639-24a6d41c5b66>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0marr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\n\u001b[0;31mNameError\u001b[0m: name 'arr' is not defined"}]}},{"text":"\n","user":"walker","dateUpdated":"2019-10-11T11:05:24+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570627950251_-191653154","id":"20191009-133230_1683063558","dateCreated":"2019-10-09T13:32:30+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:96280"}],"name":"heartDisease","id":"2EQ47DXVR","noteParams":{},"noteForms":{},"angularObjects":{"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}